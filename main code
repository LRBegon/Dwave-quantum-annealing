import numpy as np
from itertools import product

import math
import time
import matplotlib.pyplot as plt
import functools
import pickle
from scipy.sparse import lil_matrix as cs 
from scipy.sparse import identity
from scipy.sparse import kron
from scipy.sparse import linalg

n = 5
dimHS = 2**n
ntab = np.array([1,5,10,1,4])
AllConfig = np.array([i for i in product([-1,1], repeat=n)])
Energy = np.array([sum(AllConfig[i,j]*ntab[j] for j in range(n))**2 for i in range(len(AllConfig))])

plt.figure(0)
axes = plt.gca()
plt.xlabel('Spin configurations')
plt.ylabel('Energy landscape')
x = range(2**n)
plt.plot(x,Energy, marker='o', linewidth=2.0)
plt.fill_between(x, Energy, color='#539ecd', alpha = 0.25)
plt.show()
plt.grid()
pos = np.array(np.where(Energy == Energy.min())[0])
GroundState = np.array([[pos[i], Energy.min()] for i in range(len(pos))])
xGroundState = pos
yGroundState = np.array([Energy.min() for u in range(len(pos))])
plt.xticks([0,2**(n-1)-1, 2**n-1])
plt.plot(xGroundState, yGroundState, marker='o', linestyle='', c='r')
plt.savefig('EnergyLandscape_PartitioningProblem_n=6.png') 
print([AllConfig[xGroundState[i]] for i in range(len(xGroundState))])
print(pos)

# set Ising problem
# set h_i & J_ij
h = {}
J = {}
for i in range(n):
    h[i] = 0
    for j in range(i+1,n):
        J[i, j] =  2*ntab[i] * ntab[j]

"""
---------------------------
DWAVE CALCULATIONS 
---------------------------
from dwave.system.samplers import DWaveSampler
from dwave.system.composites import EmbeddingComposite

# use DWaveSampler
nreads = 1000
dw = DWaveSampler()
# embed to Chimera graph
sampler = EmbeddingComposite(dw)
# in the case of ising model, use the following
response = sampler.sample_ising(h, J, num_reads=nreads,label='Partitioning problem sym')

print(response)
print(response.record)
fileObj = open('data_sym.obj', 'wb')
pickle.dump(response,fileObj)
fileObj.close()
"""

fileObj = open('data.obj', 'rb')
response = pickle.load(fileObj)
fileObj.close()

def calcurate_energy(solution, vartype='BINARY'):
    if vartype == 'SPIN':
        ene = sum(ntab[i] ** 2 for i in range(n))
        for i in range(n):
            for j in range(i + 1, n):
                ene += J[i, j] * solution[i] * solution[j]
    else:
        raise ValueError("vartype mast be 'BINARY' or 'SPIN'.")
    return ene

# count the number of optimal solution
num_optimal_sol = 0
optimal_sol = []
twenty_sol = []
for state in response.record:
    # 0th contains a list of state, 2nd contains the number of occurrences in .record
    solution = state[0]
    num_oc = state[2]
    # compute energy
    energy = calcurate_energy(solution, vartype='SPIN')
    # count up the times when the energy is zero
    if energy == 0.0:
        num_optimal_sol += num_oc
        optimal_sol.append(solution)
    # preserve a result of 20 µs (we use later)
    twenty_sol.append(solution)
print(num_optimal_sol)

orderedstates = []
count = 0
for state in response.record:
    for j in range(len(AllConfig)):
        if np.linalg.norm(state[0]-AllConfig[j]) == 0:
            orderedstates.append([j, state[2]])
    count = count+1
orderedstates=np.array(orderedstates)

plt.figure(1)
axes = plt.gca()
plt.hist([calcurate_energy(solution, vartype='SPIN') for solution in twenty_sol], alpha=0.5, label='20μs')
plt.xlabel('Energy')
plt.ylabel('Frequency')
plt.legend()
plt.show()
plt.savefig('EnergyFrequency.png')

plt.figure(2)
axes = plt.gca()
plt.gca().set_aspect(0.1)
#axes.stem(orderedstates[:,0],orderedstates[:,1], linefmt = '-')
plt.plot(x,Energy, marker='o', linewidth=2.0, label="Energy landscape")
plt.fill_between(x, Energy, color='#539ecd', alpha = 0.25)
plt.plot(xGroundState, yGroundState, marker='o', linestyle='', c='r',label='Ground state configurations')
axes.bar(orderedstates[:,0],orderedstates[:,1], color='orange', alpha=0.75, label="Dwave spin configuration occurences (reads=1000; annealing time=20µs")
#plt.scatter(orderedstates[:,0],orderedstates[:,1])
plt.xlabel('Spin configurations')
plt.ylabel('Occurence')
plt.grid()
axes.legend(loc='upper center', bbox_to_anchor=(0.5, 1.45),
          ncol=1, fancybox=True, shadow=True)
plt.xlim([5,2**(n-1)-1])
plt.ylim([-2.5,120])
plt.show()
plt.savefig('Histo.png')
#print(response.info)
